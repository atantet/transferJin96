#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <cmath>
#include <cstring>
#include <gsl/gsl_sf_log.h>
#include <gsl/gsl_vector.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_rng.h>
#include <gsl/gsl_randist.h>
#include <libconfig.h++>
#include <ODESolvers.hpp>
#include "../model/modelTJ02.hpp"
#include "../cfg/readConfig.hpp"

using namespace libconfig;


/** \file simulation.cpp
 *  \ingroup examples
 *  \brief Simulate Timmerman and Jin (2002) model of ENSO.
 *
 *  Simulate Timmerman and Jin (2002) model of ENSO.
 */


/** \brief Add diagnostic variables to state record. */
void diagnose(const gsl_matrix *X, gsl_matrix *Xext);


/** \brief Simulate Timmerman and Jin (2002) model of ENSO.
 *
 *  Simulate Timmerman and Jin (2002) model of ENSO.
 *  After parsing the configuration file,
 *  the vector field of the Lorenz 1963 flow and the Runge-Kutta
 *  numerical scheme of order 4 are defined.
 *  The model is then integrated forward and the results saved.
 */
int main(int argc, char * argv[])
{
  FILE *dstStream;
  gsl_matrix *X, *Xext;
  char dstFileName[256], dstPostfix[256], srcPostfix[256];
  size_t seed;
  Config cfg;

  // Read configuration file
  if (argc < 2)
    {
      std::cout << "Enter path to configuration file:" << std::endl;
      std::cin >> configFileName;
    }
  else
    {
      strcpy(configFileName, argv[1]);
    }
  try
   {
     std::cout << "Sparsing config file " << configFileName << std::endl;
     cfg.readFile(configFileName);
     readGeneral(&cfg);
     readModel(&cfg);
     readSimulation(&cfg);
     readSprinkle(&cfg);
     std::cout << "Sparsing success.\n" << std::endl;
    }
  catch(const SettingTypeException &ex) {
    std::cerr << "Setting " << ex.getPath() << " type exception."
	      << std::endl;
    throw ex;
  }
  catch(const SettingNotFoundException &ex) {
    std::cerr << "Setting " << ex.getPath() << " not found." << std::endl;
    throw ex;
  }
  catch(const SettingNameException &ex) {
    std::cerr << "Setting " << ex.getPath() << " name exception."
	      << std::endl;
    throw ex;
  }
  catch(const ParseException &ex) {
    std::cerr << "Parse error at " << ex.getFile() << ":" << ex.getLine()
              << " - " << ex.getError() << std::endl;
    throw ex;
  }
  catch(const FileIOException &ex) {
    std::cerr << "I/O error while reading configuration file." << std::endl;
    throw ex;
  }
  catch (...)
    {
      std::cerr << "Error reading configuration file" << std::endl;
      return(EXIT_FAILURE);
    }

  // Define names
  sprintf(srcPostfix, "_%s", caseName);
  sprintf(dstPostfix, "%s_eps%04d_mu%04d_L%d_spinup%d_dt%d_samp%d",
	  srcPostfix, (int) (epsilon * 10000 + 0.1),
	  (int) (mu * 10000 + 0.1), (int) L, (int) spinup,
	  (int) (round(-gsl_sf_log(dt)/gsl_sf_log(10)) + 0.1),
	  (int) printStepNum);
  
  // Set random number generator
  gsl_rng *rng = gsl_rng_alloc(gsl_rng_ranlxs1);

  // Define field
  std::cout << "Defining deterministic vector field..." << std::endl;
  vectorField *field = new TJ02(epsilon, Tr0, Tr, alpha, r, Hm, H, z0,
				hstar, mu, LB, zeta, bbeta);
  
  // Define numerical scheme
  std::cout << "Defining deterministic numerical scheme..." << std::endl;
  numericalScheme *scheme = new RungeKutta4(dim);

  // Define model (the initial state will be assigned later)
  std::cout << "Defining deterministic model..." << std::endl;
  model *mod = new model(field, scheme);

  // Iterate one simulation per seed
  for (size_t s = 0; s < nSeeds; s++)
    {
      // Get seed and set random number generator
      seed = gsl_vector_uint_get(seedRng, s);
      std::cout << "Setting random number generator with seed: " << seed
		<< std::endl;;
      gsl_rng_set(rng, seed);

      // Define names and open destination file
      sprintf(dstFileName, "%s/simulation/sim%s_seed%d.%s",
	      resDir, dstPostfix, (int) seed, fileFormat);
      if (!(dstStream = fopen(dstFileName, "w")))
	{
	  std::cerr << "Can't open " << dstFileName
		    << " for writing simulation: " << std::endl;;
	  perror("");
	  return EXIT_FAILURE;
	}

      // Get random initial distribution
      gsl_vector_set(initState, 0, gsl_ran_flat(rng, 15., 40.));
      gsl_vector_set(initState, 1, gsl_ran_flat(rng, 15., 40.));
      gsl_vector_set(initState, 2, gsl_ran_flat(rng, -25., 25.));

      // Set initial state
      printf("Setting initial state to (%.1lf, %.1lf, %.1lf)\n",
	     gsl_vector_get(initState, 0),
	     gsl_vector_get(initState, 1),
	     gsl_vector_get(initState, 2));
      mod->setCurrentState(initState);

      // Numerical integration
      std::cout << "Integrating simulation..." << std::endl;
      X = gsl_matrix_alloc(1, 1); // False allocation will be corrected
      mod->integrateForward(initState, L, dt, spinup, printStepNum, &X);

      // Add diagnostic variables
      Xext = gsl_matrix_alloc(X->size1, dim + 5);
      diagnose(X, Xext);

      // Write results
      std::cout << "Writing..." << std::endl;
      if (strcmp(fileFormat, "bin") == 0)
	gsl_matrix_fwrite(dstStream, Xext);
      else
	gsl_matrix_fprintf(dstStream, Xext, "%f");
      fclose(dstStream);  

      // Free
      gsl_matrix_free(X);
      gsl_matrix_free(Xext);
    }
  delete mod;
  delete scheme;
  delete field;
  gsl_rng_free(rng);
  freeConfig();

  return 0;
}

/**
 * Add diagnostic variables to state record.
 */
void
diagnose(const gsl_matrix *X, gsl_matrix *Xext)
{
  double T1, T2, h1, h2;
  double taubeta, bLtau;
  
  /** Copy X to Xext */
  gsl_matrix_view mView
    = gsl_matrix_submatrix(Xext, 0, 0, X->size1, X->size2);
  gsl_matrix_memcpy(&mView.matrix, X);

  for (size_t k = 0; k < X->size1; k++)
    {
      /** Get T1, T2 and h from state */
      T1 = gsl_matrix_get(X, k, 0);
      T2 = gsl_matrix_get(X, k, 1);
      h1 = gsl_matrix_get(X, k, 2);

      taubeta = -mu * (T1 - T2);
      bLtau = bbeta * taubeta * LB;
      
      /** Get eastern thermocline depth */
      h2 = h1 + bLtau;
      gsl_matrix_set(Xext, k, X->size2 + 0, h2);

      /** Get wind-stress by beta */
      gsl_matrix_set(Xext, k, X->size2 + 1, taubeta);

      /** Get zonal velocity */
      gsl_matrix_set(Xext, k, X->size2 + 2,
		     epsilon * taubeta * LB / 2);

      /** Get upwelling velocity */
      gsl_matrix_set(Xext, k, X->size2 + 3,
		     -zeta * taubeta * Hm);

      /** Get subsurface temperature */
      gsl_matrix_set(Xext, k, X->size2 + 4,
		     Tr - (Tr - Tr0) / 2 * (1 - tanh(H + h2 - z0) / hstar));
    }  
  
  return;
}
